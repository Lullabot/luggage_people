<?php
/**
 * @file
 * Code for the luggage_people_authors feature.
 */

include_once 'luggage_people_authors.features.inc';

const LUGGAGE_AUTHORS_VOCAB = 'luggage_vocabulary_authors';

/**
 * @file
 * Drupal needs this blank file.
 */
function luggage_people_authors_form_people_node_form_alter(&$form, &$form_state, $form_id) {
    $form['#submit'][] = '_people_node_form_submit';
}

function _people_node_form_submit($form, &$form_state) {
    if(count($form_state['values']['field_people_author_name'][LANGUAGE_NONE]) < 1) {
        // No term exists
        $term = new stdClass();
        $term->vid = variable_get(LUGGAGE_AUTHORS_VOCAB);
        $term->name = $form_state['values']['field_people_first_name'][LANGUAGE_NONE][0]['value'] . ' ' . $form_state['values']['field_people_last_name'][LANGUAGE_NONE][0]['value'];
        $term->description = '';
        // TODO: Handle null email
//        $arr = explode('@',$form_state['values']['field_people_email'][LANGUAGE_NONE][0]['email'],2);
//        $netid = $arr[0];
        $netid = $form_state['values']['field_people_email'][LANGUAGE_NONE][0]['email'];
        $term->field_author_netid[LANGUAGE_NONE][0]['value'] = $netid;
        taxonomy_term_save($term);
        $form_state['values']['field_people_author_name'][LANGUAGE_NONE][0] = (array)$term;
    } else {
        // A term already exists and we need to modify its value
        $term = taxonomy_term_load($form['#node']->field_people_author_name[LANGUAGE_NONE][0]['tid']);
        $term->name = $form_state['values']['field_people_author_name'][LANGUAGE_NONE][0]['name'];
        taxonomy_term_save($term);
    }
}

/**
 * Implements hook_preprocess_HOOK
 */
function luggage_people_authors_process_node(&$variables) {
    if($variables['type'] == 'people') {
        $variables['authNames'] = array();
        foreach($variables['field_people_author_name'][LANGUAGE_NONE] as $name) {
            array_push($variables['authNames'],$name['tid']);
        }
//        $viewName = 'author_block';
//        $displayId = 'block';
//        print views_embed_view($viewName, $displayId, $authNames);
    }
//    if($variables['element']['#field_name'] == 'field_people_author_name') {
//        foreach($variables['element']['#items'] as $key => $item) {
//            $blah = $item['taxonomy_term']->field_author_netid[LANGUAGE_NONE][0]['value'];
//            $user = node_load(_luggage_people_get_people_by_email($blah));
//            $variables['items'][$key] = array(
//                '#markup' => '<div class="media">
//                    <div class="media-left"><a href><img src="'.image_style_url('thumbnail',$user->field_people_image[LANGUAGE_NONE][0]['uri']).'"></a></div><div class="media-body"><h4><a href>'.$item['taxonomy_term']->name.'</a>&nbsp; <small><em>'.$user->field_people_position[LANGUAGE_NONE][0]['value'].'</em></small></h4></div></div>',
//            );
//        }
//    }
}

/**
 * Implements hook_field_formatter_info()
 */
function luggage_people_authors_field_formatter_info() {
    $info = array(
        'author_list' => array(
            'label' => t('Author List'),
            'field types' => array('taxonomy_term_reference'),
            'description' => t('Displays Title as a link and URL as plain text.'),
        ),
    );
    return $info;
}

/**
 * Implements hook_field_formatter_view()
 */
function luggage_people_authors_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element = array();
    switch ($display['type']) {
        case 'author_list':
            foreach ($items as $delta => $item) {
                $term = taxonomy_term_load($item['tid'])->field_author_netid[LANGUAGE_NONE][0]['value'];
                $user = node_load(_luggage_people_get_people_by_email($term)[0]);
                $element[$delta] = array(
                    '#theme' => 'luggage_people_authors_default',
                    '#image_src' => image_style_url('thumbnail',$user->field_people_image[LANGUAGE_NONE][0]['uri']),
                    '#firstname' => $user->field_people_first_name[LANGUAGE_NONE][0]['value'],
                    '#lastname' => $user->field_people_last_name[LANGUAGE_NONE][0]['value'],
                    '#position' => $user->field_people_position[LANGUAGE_NONE][0]['value'],
                    '#url' => $user->nid,
                    '#bio' => (isset($user->field_people_bio[LANGUAGE_NONE][0]['value']))?substr($user->field_people_bio[LANGUAGE_NONE][0]['value'],0,300) . '...':'',
                );
            }
            drupal_add_css(drupal_get_path('module', 'luggage_people_authors') . '/css/luggage_people_authors.css');
            break;
    }
    return $element;
}

/**
 * Implements hook_theme()
 */
function luggage_people_authors_theme() {
    return array(
        'luggage_people_authors_default' => array(
            'template' => 'luggage_people_authors_default',
            'variables' => array(
                'image_src' => Null,
                'firstname' => Null,
                'lastname' => Null,
                'position' => Null,
                'url' => Null,
                'bio' => Null,
            ),
            'path' => drupal_get_path('module','luggage_people_authors') . '/templates'
        ),
        'node__people' => array(
            'render element' => 'content',
            'base hook' => 'node',
            'template' => 'node--people',
            'path' => drupal_get_path('module','luggage_people_authors') . '/templates'
        )
    );
}

/**
 * Helper function to get the people node based on email address
 * @param $mail: email address of target people node
 * @return array|bool: nid of the people node in a form suitable for entity_load(). FALSE if not found
 */
function _luggage_people_get_people_by_email($mail) {

    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'people')
        ->fieldCondition('field_people_email', 'email', $mail, '=');

    $result = $query->execute();

    if(!empty($result)) {
        return array_keys($result['node']);
    }

    return FALSE;
}
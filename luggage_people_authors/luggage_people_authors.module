<?php
/**
 * @file
 * Code for the luggage_people_authors feature.
 */

include_once 'luggage_people_authors.features.inc';

const LUGGAGE_AUTHORS_VOCAB = 'authors';

/**
 * @file
 * Drupal needs this blank file.
 */
function luggage_people_authors_form_people_node_form_alter(&$form, &$form_state, $form_id) {
    $form['#submit'][] = '_people_node_form_submit';
}

function _people_node_form_submit($form, &$form_state) {
    $names = ($form['field_people_author_name'][LANGUAGE_NONE]['#default_value'] != "")?explode(',',$form['field_people_author_name'][LANGUAGE_NONE]['#default_value']):null;
    $values = $form_state['values']['field_people_author_name'][LANGUAGE_NONE];
    if(!$names) {
        if(count($values) == 0) {
            // If there were no values before
            // Assign an author name
            $name = getTermName($form_state);
            $t = array_slice(taxonomy_get_term_by_name($name,LUGGAGE_AUTHORS_VOCAB),0,1)[0];
            if(count($t) == 0) {
                // No term exists in the vocabulary
                // Create one
                $netid = $form_state['values']['field_people_email'][LANGUAGE_NONE][0]['email'];
                $form_state['values']['field_people_author_name'][LANGUAGE_NONE][] = (array)createTerm($name,$netid);
            } else {
                // Term already exists.
                // Reassign?
                if($t->field_author_netid[LANGUAGE_NONE][0]['value'] == $form_state['values']['field_people_email'][LANGUAGE_NONE][0]['email']) {
                    // If term is owned by this user
                    // Reassign
                    $form_state['values']['field_people_author_name'][LANGUAGE_NONE][] = (array)$t;
                }
            }
        }
    } else {

    }
//    if(count($names) == 1 && $names[0]=='' && count($form_state['values']['field_people_author_name'][LANGUAGE_NONE]) == 0) {
//        // User submitted the page without ever entering a term
//        $name = $form_state['values']['field_people_first_name'][LANGUAGE_NONE][0]['value'] . ' ' . $form_state['values']['field_people_last_name'][LANGUAGE_NONE][0]['value'];
//        $netid = $form_state['values']['field_people_email'][LANGUAGE_NONE][0]['email'];
//        $form_state['values']['field_people_author_name'][LANGUAGE_NONE][0] = (array)createTerm($name,$netid);
//    }
//    // User submitted the page with 1 new term
//    // User submitted the page with 2 new terms
//    // User submitted the page and modified the first term
//    foreach($form_state['values']['field_people_author_name'][LANGUAGE_NONE] as $i => $term) {
//        if (!isset($names[$i])) {
//            // This term does not exist yet
//            $name = $form_state['values']['field_people_first_name'][LANGUAGE_NONE][0]['value'] . ' ' . $form_state['values']['field_people_last_name'][LANGUAGE_NONE][0]['value'];
//            $netid = $form_state['values']['field_people_email'][LANGUAGE_NONE][0]['email'];
//            $form_state['values']['field_people_author_name'][LANGUAGE_NONE][0] = (array)createTerm($name,$netid);
//        } else if($term['name'] != trim($names[$i])) {
//            // This term has been modified and needs to be updated
//            $t = taxonomy_term_load($form['#entity']->field_people_author_name[LANGUAGE_NONE][$i]['tid']);
//            $t->name = $term['name'];
//            taxonomy_term_save($t);
//            $form_state['values']['field_people_author_name'][LANGUAGE_NONE][$i] = object_to_array($t);
//        }
//    }
}

function getTermName($form_state) {
    return $form_state['values']['field_people_first_name'][LANGUAGE_NONE][0]['value'] . ' ' . $form_state['values']['field_people_last_name'][LANGUAGE_NONE][0]['value'];
}

function createTerm($name,$netid) {
    $term = new stdClass();
    $term->vid = get_vocab_id(LUGGAGE_AUTHORS_VOCAB)->vid;
    $term->name = $name;
    $term->description = '';
    // TODO: Handle null email
//        $arr = explode('@',$form_state['values']['field_people_email'][LANGUAGE_NONE][0]['email'],2);
//        $netid = $arr[0];
    $term->field_author_netid[LANGUAGE_NONE][0]['value'] = $netid;
    taxonomy_term_save($term);
    return $term;
}

/**
 * @param $vocab_machine_name
 * @return null or vocabulary object
 */
function get_vocab_id($vocab_machine_name) {
    $vocabularies = taxonomy_get_vocabularies();
    $vocab = Null;
    foreach($vocabularies as $v) {
        if($v->machine_name == $vocab_machine_name) {
            $vocab = $v;
            break;
        }
    }
    return $vocab;
}

function object_to_array($object) {
    if(is_object($object)) {
        $object = get_object_vars($object);
    }
    if(is_array($object)) {
        return array_map(__FUNCTION__, $object);
    } else {
        return $object;
    }
}

/**
 * Implements hook_field_widget_info().
 */
function luggage_people_authors_field_widget_info() {
    return array(
      'author_widget' => array(
        'label' => t('Author Widget'),
        'field types' => array('taxonomy_term_reference'),
      ),
    );
}

/**
 * Implements hook_preprocess_HOOK
 */
function luggage_people_authors_process_node(&$variables) {
    if($variables['type'] == 'people') {
        $variables['authNames'] = array();
        foreach($variables['field_people_author_name'][LANGUAGE_NONE] as $name) {
            array_push($variables['authNames'],$name['tid']);
        }
        $variables['authNames'] = implode('+',$variables['authNames']);
    }
}

/**
 * Implements hook_field_widget_form().
 */
function luggage_people_authors_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
    switch ($instance['widget']['type']) {
        case 'author_widget' :
            $element['author_widget'] = array(
              '#type' => 'fieldset',
              '#title' => $element['#title'],
              '#tree' => TRUE,
            );
            $element['author_widget']['alias_name'] = array(
              '#type' => 'textfield',
              '#title' => t('Name'),
              '#default_value' => isset($items[$delta]['author_name']) ? $items[$delta]['author_name'] : '',
              '#required' => $element['#required'],
            );
            break;
    }
    return $element;
}

/**
 * Implements hook_field_formatter_info()
 */
function luggage_people_authors_field_formatter_info() {
    $info = array(
        'author_list' => array(
            'label' => t('Author List'),
            'field types' => array('taxonomy_term_reference'),
            'description' => t('Displays Title as a link and URL as plain text.'),
        ),
    );
    return $info;
}

/**
 * Implements hook_field_formatter_view()
 */
function luggage_people_authors_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element = array();
    switch ($display['type']) {
        case 'author_list':
            foreach ($items as $delta => $item) {
                $term = taxonomy_term_load($item['tid'])->field_author_netid[LANGUAGE_NONE][0]['value'];
                $user = node_load(_luggage_people_get_people_by_email($term)[0]);
                $element[$delta] = array(
                    '#theme' => 'luggage_people_authors_default',
                    '#image_src' => image_style_url('thumbnail',$user->field_people_image[LANGUAGE_NONE][0]['uri']),
                    '#firstname' => $user->field_people_first_name[LANGUAGE_NONE][0]['value'],
                    '#lastname' => $user->field_people_last_name[LANGUAGE_NONE][0]['value'],
                    '#position' => $user->field_people_position[LANGUAGE_NONE][0]['value'],
                    '#url' => $user->nid,
                    '#bio' => (isset($user->field_people_bio[LANGUAGE_NONE][0]['value']))?substr($user->field_people_bio[LANGUAGE_NONE][0]['value'],0,300) . '...':'',
                );
            }
            drupal_add_css(drupal_get_path('module', 'luggage_people_authors') . '/css/luggage_people_authors.css');
            break;
    }
    return $element;
}

/**
 * Implements hook_theme()
 */
function luggage_people_authors_theme() {
    return array(
        'luggage_people_authors_default' => array(
            'template' => 'luggage_people_authors_default',
            'variables' => array(
                'image_src' => Null,
                'firstname' => Null,
                'lastname' => Null,
                'position' => Null,
                'url' => Null,
                'bio' => Null,
            ),
            'path' => drupal_get_path('module','luggage_people_authors') . '/templates'
        ),
        'node__people' => array(
            'render element' => 'content',
            'base hook' => 'node',
            'template' => 'node--people',
            'path' => drupal_get_path('module','luggage_people_authors') . '/templates'
        )
    );
}

/**
 * Helper function to get the people node based on email address
 * @param $mail: email address of target people node
 * @return array|bool: nid of the people node in a form suitable for entity_load(). FALSE if not found
 */
function _luggage_people_get_people_by_email($mail) {

    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'people')
        ->fieldCondition('field_people_email', 'email', $mail, '=');

    $result = $query->execute();

    if(!empty($result)) {
        return array_keys($result['node']);
    }

    return FALSE;
}